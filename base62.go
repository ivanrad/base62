// Package base62 implements a simple Base62 encoder/decoder.
package base62

import (
	"strconv"
)

const encodingAlphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"

var charToBitsTable = [256]byte{
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b,
	0x3c, 0x3d, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06,
	0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e,
	0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16,
	0x17, 0x18, 0x19, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20,
	0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28,
	0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30,
	0x31, 0x32, 0x33, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
}

// EncodedLen returns the maximum possible length in bytes of the base62
// encoding of an input buffer of length n.
func EncodedLen(n int) int {
	return (n*8)/5 + 1
}

// DecodedLen returns the maximum possible length in bytes of the decoded data
// corresponding to n bytes of base62-encoded data.
func DecodedLen(n int) int {
	return (n*6)/8 + 1
}

// Encode writes a base62 encoding of src to dst, writing at most
// EncodedLen(len(src)) bytes.  It returns the number of bytes written.
func Encode(dst, src []byte) int {
	if len(src) == 0 {
		return 0
	}
	var n, nbuf int
	var buf uint32
	for _, b := range src {
		buf = (buf << 8) | uint32(b)
		nbuf += 8
		for nbuf >= 6 {
			c := (buf >> (nbuf - 6)) & 0x3f
			switch c & ^uint32(1) {
			case 0x3e:
				dst[n] = encodingAlphabet[61]
				nbuf -= 5
			case 0x3c:
				dst[n] = encodingAlphabet[60]
				nbuf -= 5
			default:
				dst[n] = encodingAlphabet[c]
				nbuf -= 6
			}
			n++
		}
	}
	if nbuf > 0 {
		c := buf & ((1 << nbuf) - 1)
		dst[n] = encodingAlphabet[c]
		n++
	}
	return n
}

// EncodeToString returns the base62 encoding of src string.
func EncodeToString(src []byte) string {
	dst := make([]byte, EncodedLen(len(src)))
	n := Encode(dst, src)
	return string(dst[:n])
}

// InputError is returned if base62-encoded input contains malformed data.
type InputError int64

func (e InputError) Error() string {
	switch int64(e) {
	case -1:
		return "input truncated"
	default:
		return "invalid base62 character at position " +
			strconv.FormatInt(int64(e), 10)
	}
}

// Decode writes the decoded bytes of base62-encoded src to dst, writing at
// most DecodedLen(len(src)) bytes.  It returns the number of bytes written. If
// input contains malformed base62 data, an InputError will be returned.
func Decode(dst, src []byte) (int, error) {
	if len(src) == 0 {
		return 0, nil
	}
	var n, nbuf int
	var buf uint32
	for idx, b := range src {
		k := charToBitsTable[b]
		switch k {
		case 0xff:
			return n, InputError(idx)
		case 61:
			buf = (buf << 5) | 0x1f
			nbuf += 5
		case 60:
			buf = (buf << 5) | 0x1e
			nbuf += 5
		default:
			buf = (buf << 6) | uint32(k)
			nbuf += 6
		}
		for nbuf >= 16 {
			dst[n] = byte(buf >> (nbuf - 8))
			n++
			nbuf -= 8
		}
	}
	if nbuf > 0 {
		if nbuf < 8 {
			return n, InputError(-1)
		}
		dst[n] = byte(((buf &^ 0x3f) >> (nbuf - 8)) | (buf & 0x3f))
		n++
	}
	return n, nil
}

// DecodeString returns the decoded bytes of base62-encoded string s.
func DecodeString(s string) ([]byte, error) {
	src := []byte(s)
	dst := make([]byte, DecodedLen(len(src)))
	n, err := Decode(dst, src)
	return dst[:n], err
}
